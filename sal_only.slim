initialize() { 
// no de novo mutations
// maybe 1.2 e -8 (what Nathan is using)
 initializeMutationRate(1e-7); 
 
 //TODO: do I need a neutral mutation? 
 initializeMutationType("m1", 0.5, "f", 0.0); // neutral, have mutation callback return F
 initializeMutationType("m2", 0.5, "f", 0.0); // QTLs: salinity

 // leave at false: not evolving to fix (not super strong effect size)
m2.convertToSubstitution = F; 
m2.color = "red"; 
 
// g1 is a neutral region, g2-4 is a QTL
// put areas in between sites as neutral mutation type
 initializeGenomicElementType("g1", m1, 1.0); 
 initializeGenomicElementType("g2", m2, 1.0); 
// initializeGenomicElementType("g3", m3, 1.0);
// initializeGenomicElementType("g4", m4, 1.0); 
 
 
// TODO: This will be replaced with chormosome data from R
// chromosome of length 0-146344000 with three QTL regions
// fill in other spots with neutral data
 initializeGenomicElement(g1, 106888983, 106889983); 
 initializeGenomicElement(g1, 106889984, 106890983);
 initializeGenomicElement(g1, 76338405, 76339405);
 initializeGenomicElement(g1, 76339406, 76340405);
 initializeGenomicElement(g1, 6870586, 6871586);
 initializeGenomicElement(g1, 6871587, 6872586);
 initializeGenomicElement(g1, 99441917,99442917);
 initializeGenomicElement(g1, 99442918,99443917);
 initializeGenomicElement(g1, 49014505, 49015505); 
 initializeGenomicElement(g1, 49015506, 49016505); 
 initializeGenomicElement(g1, 118852967, 118853967);
 initializeGenomicElement(g1, 118853968, 118854967);
 initializeGenomicElement(g1, 57775675, 57776675); 
 initializeGenomicElement(g1, 57776676, 57777675);   
 initializeGenomicElement(g1, 135421622, 135422622);
 initializeGenomicElement(g1, 135422623, 135423622);
 initializeGenomicElement(g1, 115135050, 115136050);
 initializeGenomicElement(g1, 11086922, 11087921);
 
 initializeGenomicElement(g1, 115136051, 115137050);
 initializeGenomicElement(g1, 11085921, 11086921);
  
 initializeGenomicElement(g2, 27398574, 27399574); 
 initializeGenomicElement(g2, 27399575, 27400574); 
 initializeGenomicElement(g2, 87762265, 87763265); 
 initializeGenomicElement(g2, 87763266, 87764265); 
 initializeGenomicElement(g2, 82822460, 82823460); 
 initializeGenomicElement(g2, 82823461, 82824460); 
 initializeGenomicElement(g2, 76904698, 76905698);
 initializeGenomicElement(g2, 76905699, 76906698); 
 initializeGenomicElement(g2, 38277771, 38278771);
 initializeGenomicElement(g2, 38278772, 38279771);
 initializeGenomicElement(g2, 74181449, 74182449);
 initializeGenomicElement(g2, 74182450, 74183449);
 initializeGenomicElement(g2, 22453482, 22454482); 
 initializeGenomicElement(g2, 22454483, 22455482); 
 initializeGenomicElement(g2, 126185127, 126186127);
 initializeGenomicElement(g2, 126186128, 126187127); 
 initializeGenomicElement(g2, 82575450, 82576450); 
 initializeGenomicElement(g2, 122816614, 122817613); 

 initializeGenomicElement(g2, 82576451, 82577450);
 initializeGenomicElement(g2, 122815613, 122816613); 
 
 initializeGenomicElement(g1, 0, 6870585); 
 initializeGenomicElement(g1, 6872587, 11085920);
 initializeGenomicElement(g1, 11087922, 22453481);
 initializeGenomicElement(g1, 22455483, 27398573);
 initializeGenomicElement(g1, 27400575, 38277770);
 initializeGenomicElement(g1, 38279772, 49014504);
 initializeGenomicElement(g1, 49016506, 57775674);
 initializeGenomicElement(g1, 57777676, 74181448);
 initializeGenomicElement(g1, 74183450, 76338404);
 initializeGenomicElement(g1, 76340406, 76904697);
 initializeGenomicElement(g1, 76906699, 82575449);
 initializeGenomicElement(g1, 82577451, 82822459);
 initializeGenomicElement(g1, 82824461, 87762264);
 initializeGenomicElement(g1, 87764266, 99441916);
 initializeGenomicElement(g1, 99443918, 106888982);
 initializeGenomicElement(g1, 106890984, 115135049);
 initializeGenomicElement(g1, 115137051, 118852966);
 initializeGenomicElement(g1, 118854968, 122815612);
 initializeGenomicElement(g1, 122817614, 126185126);
 initializeGenomicElement(g1, 126187128, 135421621);
 initializeGenomicElement(g1, 135423623, 146344000);
 
 // recombination rate: 1.6e-8 (species from Brennan paper)
 initializeRecombinationRate(1.6e-8); 
 
// QTL-related constants used below
// TODO: will I be changing these variables?
 defineConstant("QTL_mu", c(0, 0)); //mean effect of new mutations on the two phenotypes
 defineConstant("QTL_cov", 0.25); 
 //covariance between the two effects (Look at paper, talk to Juanita?
 //pleiotropy, linkage, tradeoff
 //TODO: good parameter to vary if no one knows!!!
 
 defineConstant("QTL_sigma", matrix(c(1,QTL_cov,QTL_cov,1), nrow=2)); 
 //"variance-covariance matrix derived from QTL_cov that will govern new mutational effects"
 
 defineConstant("QTL_optima", c(20, -20));
 }
//optimal phenotypic values for the two quantitative traits
//A width of 20.0 is hard-coded here for the fitness functions
/* 13.5: "note that the optima have different signs, but the sigma encodes a positive mutational correlation, so adaptation in this model will be contrary to the pleiotropically 
preferred direction of evolution." */

//add population
1 late() { 
sim.addSubpop("p1", 100); 
} 


// mutations
mutation(m2) {  //temperature only

//see section 25.8 in manual
// draw mutational effects for the new m2 mutation
 effects = rmvnorm(1, QTL_mu, QTL_sigma);
 //to draw effects of mutation for each generation
//effect sizes drawn from a multivariate normal distribution, 
 mut.setValue("sal", effects[0]); 
//matrix of two columns: effect size 0 and 1
 
// remember all drawn effects, for our final output
old_effects = sim.getValue("all_effects"); 
sim.setValue("all_effects", rbind(old_effects, effects)); 
 
return T; 
} 

/*

mutation(m3) { //salinity only

//see section 25.8 in manual
// draw mutational effects for the new m3 mutation
 effects = rmvnorm(1, QTL_mu, QTL_sigma);
 //to draw effects of mutation for each generation
//effect sizes drawn from a multivariate normal distribution, 
 mut.setValue("sal", effects[1]); 
//matrix of two columns: effect size 0 and 1
 
// remember all drawn effects, for our final output
old_effects = sim.getValue("all_effects"); 
sim.setValue("all_effects", rbind(old_effects, effects)); 
 
return T; 
} 

// mutation: pleiotropic
mutation(m4) { 

//see section 25.8 in manual
// draw mutational effects for the new m4 mutation
 effects = rmvnorm(1, QTL_mu, QTL_sigma);
 //to draw effects of mutation for each generation
//effect sizes drawn from a multivariate normal distribution, 
 mut.setValue("temp", effects[0]); 
 mut.setValue("sal", effects[1]); 
//matrix of two columns: effect size 0 and 1
 
// remember all drawn effects, for our final output
old_effects = sim.getValue("all_effects"); 
sim.setValue("all_effects", rbind(old_effects, effects)); 
 
return T; 
} 

*/


// code to calculate phenotype and fitness of each individual: 
late() { 
for (ind in sim.subpopulations.individuals) 
 { 
 // construct phenotypes from additive effects of QTL mutations
 muts = ind.genomes.mutationsOfType(m2);
// muts2 = ind.genomes.mutationsOfType(m3);
// muts3 = ind.genomes.mutationsOfType(m4);
 
 phenotype0 = size(muts) ? sum(muts.getValue("sal")) else 0.0; 
// phenotype0 = phenotype0 + (size(muts3) ? sum(muts3.getValue("temp")) else 0.0);
// phenotype1 = size(muts2) ? sum(muts2.getValue("sal")) else 0.0; 
// phenotype1 = phenotype1 + (size(muts3) ? sum(muts3.getValue("sal")) else 0.0);
 ind.setValue("phenotype0", phenotype0); //temp
// ind.setValue("phenotype1", phenotype1); //salinity
 
/* 13.5: "Using key-value pairs as in this recipe is a bit more complex, and a bit 
slower, but more general and extensible; any number of keys can be defined on an object, 
and so this recipe can be easily extended to any number of phenotypic traits, each 
influenced by separate mutational effects.*/
 
 // calculate fitness effects
 // look at standard deviation: reduce? take another look at manual
 effect0 = 1.0 + dnorm(QTL_optima[0] - phenotype0, 0.0, 20.0) * 10.0; 
// effect1 = 1.0 + dnorm(QTL_optima[1] - phenotype1, 0.0, 20.0) * 10.0; 
 //10.0 multiplier: an individual precisely at the phenotypic optimum has a fitness of 10.0
 // relative to an individual infinitely far from the optimum
 ind.fitnessScaling = effect0; 
 } 
}


/*Every thousend generations, the below method prints a summary of adaptation so far, with generation number and mean phenotype 0 and 1. 
It continues to run untol both phenotypic means get withing 10% of their optima
When it reaches this peak, final output is printed out: a dump of all of the segregating QTL mutations in the population, sorted by frequency*/

//TODO: add allele frequency changes of mutations
//output full: save final state of simulation (vsf)
 
1:50000 late() { 
// output, run every 500 generations
if (sim.generation % 500 != 0) 
 return; 
 
// print final phenotypes versus their optima
 inds = sim.subpopulations.individuals; 
 p0_mean = mean(inds.getValue("phenotype0")); 
// p1_mean = mean(inds.getValue("phenotype1")); 
 
 catn(); 
 catn("Generation: " + sim.generation); 
 catn("Mean phenotype sal: " + p0_mean + " (" + QTL_optima[0] + ")"); 
// catn("Mean phenotype sal: " + p1_mean + " (" + QTL_optima[1] + ")"); 
 
//TODO: add callouts to R output file here 
 
// keep running until we get within 10% of both optima
if ((abs(p0_mean - QTL_optima[0]) > abs(0.1 * QTL_optima[0]))) 
 return; 
 
// we are done with the main adaptive walk; print final output
 
// get the QTL mutations and their frequencies
 m2muts = sim.mutationsOfType(m2); 
 m2freqs = sim.mutationFrequencies(NULL, m2muts); 
 
// sort those vectors by frequency
 o = order(m2freqs, ascending=F); 
 m2muts = m2muts[o]; 
 m2freqs = m2freqs[o];
 // get the effect sizes
 m2e0 = m2muts.getValue("temp"); 
 m2e1 = m2muts.getValue("sal"); 
 
 //also print out number of mutations of each type
 // use VCF?

/* 
// now output a list of the QTL mutations and their effect sizes
 catn("\nQTL mutations (f: temp, sal):"); 
for (i in seqAlong(m2muts)) 
 catn(m2freqs[i] + ": " + m2e0[i] + ", " + m2e1[i]); 
 
// output covariances
 fixed_m2 = m2muts[m2freqs == 1.0]; 
 cov_fixed = cov(fixed_m2.getValue("temp")); 
 effects = sim.getValue("all_effects"); 
 cov_drawn = cov(drop(effects[,0]), drop(effects[,1])); 
 
 //cov_fixed = cov(fixed_m2.getValue("temp"), fixed_m2.getValue("sal"));
 
 catn("\nCovariance of effects among fixed QTLs: " + cov_fixed); 
 catn("\nCovariance of effects specified by the QTL DFE: " + QTL_cov); 
 catn("\nCovariance of effects across all QTL draws: " + cov_drawn); 
 */
 
sim.simulationFinished(); 
} 

//extra code to plot to SLiMgui
1  late() { 
sim.setValue("history", matrix(c(0.0, 0.0), nrow=1)); 
 defineConstant("pngPath", writeTempFile("plot_", ".png", "")); 
 
// If we're running in SLiMgui, open a plot window
if (exists("slimgui")) 
 slimgui.openDocument(pngPath); 
}